version: '3.8'

services:
  # ------------------------------------------------------------------------------------------------
  # SERVIÇOS DE APLICAÇÃO
  # ------------------------------------------------------------------------------------------------

  # Serviço para o front-end Angular
  # angular-app:
  #   build:
  #     context: ./angular
  #   ports:
  #     - "4200:4200"
  #   volumes:
  #     - ./angular:/app
  #   command: ng serve --host 0.0.0.0 --disable-host-check

  # # Serviço para o back-end .NET 9
  # dotnet-app:
  #   build:
  #     context: ./.net
  #   ports:
  #     - "5000:8080"
  #   volumes:
  #     - ./.net:/app
  #   depends_on:
  #     - postgres-db
  #     - rabbitmq
  #     - kafka

  # ------------------------------------------------------------------------------------------------
  # SERVIÇOS DE BANCO DE DADOS E GERENCIAMENTO
  # ------------------------------------------------------------------------------------------------

  # Banco de Dados (exemplo com PostgreSQL)
  postgres-db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: senha@123
      POSTGRES_DB: db_postgres
    volumes:
      - ./database/data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Gerenciador de Banco de Dados (Adminer)
  db-manager:
    image: adminer:latest
    ports:
      - "8081:8080"
    depends_on:
      - postgres-db

  # ------------------------------------------------------------------------------------------------
  # SERVIÇOS DE MENSAGERIA E GERENCIAMENTO
  # ------------------------------------------------------------------------------------------------

  # RabbitMQ com interface de gerenciamento
  rabbitmq:
    image: rabbitmq:management
    hostname: rabbitmq
    ports:
      - "5672:5672" # Porta padrão para comunicação AMQP
      - "15672:15672" # Porta da interface de gerenciamento
    environment:
      - RABBITMQ_DEFAULT_USER=admin # Define um novo usuário
      - RABBITMQ_DEFAULT_PASS=admin # Define uma nova senha
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq

  # Ferramenta de Gerenciamento para Kafka (Kafka UI)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  # Kafka (incluindo Zookeeper)
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - ./kafka/data:/bitnami/kafka

  # ------------------------------------------------------------------------------------------------
  # SERVIÇOS DE OBSERVABILIDADE E VISUALIZAÇÃO
  # ------------------------------------------------------------------------------------------------

  # Ferramenta de Observabilidade: Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # Ferramenta de Visualização: Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus

  # Ferramenta de Rastreamento Distribuído: Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp" # Porta para o agente
      - "16686:16686" # Porta da UI (Interface do Usuário)
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true